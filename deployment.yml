apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-container-2-depl-experimental
  labels: {app: flask-container-2, version: experimental}
spec:
  replicas: 1
  selector:
    matchLabels: {app: flask-container-2, version: experimental}
  template:
    metadata:
      labels: {app: flask-container-2, version: experimental}
      annotations:
         prometheus.io/scrape: "true"
         prometheus.io/port: "8080"
    spec:
      containers:
      - name: flask-container-2
        image: ghcr.io/remla23-team12/model-service:0.5.0
        ports:
        - containerPort: 8080
      imagePullSecrets:
      - name: ghcr-credentials
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-container-1-depl-experimental
  labels: {app: flask-container-1, version: experimental}
spec:
  replicas: 1
  selector:
    matchLabels: {app: flask-container-1, version: experimental}
  template:
    metadata:
      labels: {app: flask-container-1, version: experimental}
      annotations:
         prometheus.io/scrape: "true"
         prometheus.io/port: "5000"
    spec:
      containers:
      - name: flask-container-1
        image: ghcr.io/remla23-team12/app:0.1.0
        ports:
        - containerPort: 5000
        env:
        - name: MODEL_SERVICE_URL
          value: "http://flask-container-2-service:8082"
      imagePullSecrets:
      - name: ghcr-credentials
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-container-2-depl-v1
  labels: {app: flask-container-2, version: v1}
spec:
  replicas: 1
  selector:
    matchLabels: {app: flask-container-2, version: v1}
  template:
    metadata:
      labels: {app: flask-container-2, version: v1}
      annotations:
         prometheus.io/scrape: "true"
         prometheus.io/port: "8080"
    spec:
      containers:
      - name: flask-container-2
        image: ghcr.io/remla23-team12/model-service:0.1.5
        ports:
        - containerPort: 8080
      imagePullSecrets:
      - name: ghcr-credentials
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-container-1-depl-v1
  labels: {app: flask-container-1, version: v1}
spec:
  replicas: 1
  selector:
    matchLabels: {app: flask-container-1, version: v1}
  template:
    metadata:
      labels: {app: flask-container-1, version: v1}
      annotations:
         prometheus.io/scrape: "true"
         prometheus.io/port: "5000"
    spec:
      containers:
      - name: flask-container-1
        image: ghcr.io/remla23-team12/app:0.1.0
        ports:
        - containerPort: 5000
        env:
        - name: MODEL_SERVICE_URL
          value: "http://flask-container-2-service:8082"
      imagePullSecrets:
      - name: ghcr-credentials
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-container-2-depl-v2
  labels: {app: flask-container-2, version: v2}
spec:
  replicas: 1
  selector:
    matchLabels: {app: flask-container-2, version: v2}
  template:
    metadata:
      labels: {app: flask-container-2, version: v2}
      annotations:
         prometheus.io/scrape: "true"
         prometheus.io/port: "8080"
    spec:
      containers:
      - name: flask-container-2
        image: ghcr.io/remla23-team12/model-service:0.1.6
        ports:
        - containerPort: 8080
      imagePullSecrets:
      - name: ghcr-credentials
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-container-1-depl-v2
  labels: {app: flask-container-1, version: v2}
spec:
  replicas: 1
  selector:
    matchLabels: {app: flask-container-1, version: v2}
  template:
    metadata:
      labels: {app: flask-container-1, version: v2}
      annotations:
         prometheus.io/scrape: "true"
         prometheus.io/port: "5000"
    spec:
      containers:
      - name: flask-container-1
        image: ghcr.io/remla23-team12/app:latest
        ports:
        - containerPort: 5000
        env:
        - name: MODEL_SERVICE_URL
          value: "http://flask-container-2-service:8082"
      imagePullSecrets:
      - name: ghcr-credentials
---
apiVersion: v1
kind: Service
metadata:
  name: flask-container-2-service
spec:
  selector:
    app: flask-container-2
  ports:
    - name: http-8082
      port: 8082
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: flask-container-1-service
spec:
  type: NodePort
  selector:
    app: flask-container-1
  ports:
    - name: http-8081
      port: 8081
      targetPort: 5000
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: flask-container-2-destination-rule
spec:
  host: flask-container-2-service
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
  - name: experimental
    labels:
      version: experimental
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: flask-container-1-destination-rule
spec:
  host: flask-container-1-service
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
  - name: experimental
    labels:
      version: experimental
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: my-entry-service
spec:
  gateways:
    - my-gateway
  hosts:
  - "*"
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: flask-container-1-service
        subset: v1
      weight: 70
    - destination:
        host: flask-container-1-service
        subset: experimental
      weight: 15
    - destination:
        host: flask-container-1-service
        subset: v2
      weight: 15
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: my-gateway
spec:
  selector:
    istio:  
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: flask-container-2-virtual-service
spec:
  hosts:
  - flask-container-2-service
  http:
  - match:
    - sourceLabels:
        version: v2
    route:
    - destination:
        host: flask-container-2-service
        subset: v2
    - sourceLabels:
        version: experimental
    route:
    - destination:
        host: flask-container-2-service
        subset: experimental
  - route:
    - destination:
        host: flask-container-2-service
        subset: v1
